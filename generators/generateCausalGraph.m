function [M,E4Plot]=generateCausalGraph(nSeries,varargin)
% generates a causal graph model usable for generating time series using
% produceMulti and for ploting using grPlot
%
% Inputs:
% =======
% nSeries = the number of variables
%
% Outputs:
% ========
% M            The output model as needed by produceMulti (look there for
%               explanation)
% E4Plot       The edges matrix as required by grPlot
%
%
%
% Optional Inputs:
% ===============
% pCausality = probability of causal relations (default 25%)
% pSelfChange = probability that a time series will change its pattern
%               without any reason (not even a self loop) (default=0)
% allowSelfLoops = if nonzero then a series may cause itself (default 0)
% allowSelfLoops = if nonzero then graph is allowed to be cyclic (default 1)
% maxParents = the maximum number of parents for any time series (default
%               nSeries)
% ARRange = the range of AR number of parameters when the process is
%           generated by an AR model (default is [1,10])
% check the rest in the switch statement
%

pCausality=.25;
pSelfChange=0.0;
allowSelfLoops=0;
allowLoops=0;
maxParents=nSeries;
maxChildren=nSeries;
arRange=[1,10];
mRange=[1,20];
sRange=[1,10];
pRange=[1,1];
cRange=[0,0];
nRange=[1,1];

nArgs=size(varargin,2);
if(nArgs>0)
    if(mod(nArgs,2)~=0)
        error('The optional arguments must be in the form name,value so they must be even!!!');
    end
    for i=1:2:nArgs
        switch(lower(varargin{i}))       
            case {'pcausality','pc'} 
                pCausality=(varargin{i+1});
            case {'pselfchange','psc'}                 
                pSelfChange=(varargin{i+1});
            case {'allowselfloops','asl'}                
                allowSelfLoops=(varargin{i+1});
            case {'allowloops','al'} 
                allowLoops=(varargin{i+1});
            case {'maxparents','mp'} 
                maxParents=(varargin{i+1});
            case {'maxchildren','mc'}               
                maxChildren=(varargin{i+1});
            case {'arrange','arr'} 
                arRange=(varargin{i+1});
            case {'meanrange','mr'}             % range for the mean time before causality takes effect
                mRange=(varargin{i+1});
            case {'stddevrange','sr'}           % range for the std. dev. time before causality takes effect
                sRange=(varargin{i+1});
            case {'prange','pr'}                % the range of possible probabilities of causation manifesting itself in the data (default 1)
                pRange=(varargin{i+1});
            case {'couplingrange','cr'}         % the range of number of coupling parameters between the cause and effect when effect is changing
                cRange=(varargin{i+1});            
            case {'ndimensions','nd'}         % the range of number of dimensions for each time series
                nRange=(varargin{i+1});            
            otherwise
                error('Unknown argument: %s',varargin{i});
        end
    end
end

% generate connection matrix
if(~allowLoops)
    m=rand(nSeries,nSeries);
    for i=1:nSeries
        m(i,i+1:end)=ones(1,nSeries-i);
    end
    m(((m-2*pCausality))<0)=0;
    m(m>(2*pCausality))=1;
else
    m=rand(nSeries,nSeries);
    m(((m-pCausality))<0)=0;
    m(m>pCausality)=1;
end
m=ones(nSeries,nSeries)-m;
% remove self loops if needed
if(~allowSelfLoops)
    for i=1:nSeries
        m(i,i)=0;
    end
end

% confirm maximum number of parents
for i=1:nSeries
    if(sum(m(i,:))>maxParents)
        l=find(m(i,:),1);
        l=l(randperm(numel(l)));
        l=l(1:maxParents);
        m(i,:)=zeros(1,nSeries);
        m(i,l)=1;
    end
end

for i=1:nSeries
    if(sum(m(:,i))>maxChildren)
        l=find(m(:,i),1);
        l=l(randperm(numel(l)));
        l=l(1:maxParents);
        m(:,i)=zeros(1,nSeries);
        m(l,i)=1;
    end
end

% build the model
M=cell(nSeries,4);
E4Plot=[];
for i=1:nSeries
    M{i,2}=pSelfChange;
    M{i,3}=arRange;
    M{i,4}=(nRange(2)-nRange(1))*rand(1,1)+nRange(1);
    M{i,1}=[];    
    for j=1:nSeries
        if(m(i,j)>eps)
            meantime=(mRange(2)-mRange(1))*rand(1,1)+mRange(1);
            M{i,1}=[M{i,1};
                j,...
                meantime,...
                (sRange(2)-sRange(1))*rand(1,1)+sRange(1),...
                (pRange(2)-pRange(1))*rand(1,1)+pRange(1),...
                (cRange(2)-cRange(1))*rand(1,1)+cRange(1),...                
                ];
            E4Plot=[E4Plot;j,i,meantime];
        end
    end
end

